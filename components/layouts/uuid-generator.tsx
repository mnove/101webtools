"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Clipboard, Info, RefreshCw } from "lucide-react";
import * as React from "react";
import { toast } from "sonner";
import { v1 as uuidv1, v4 as uuidv4, v5 as uuidv5, validate } from "uuid";
import { Label } from "../ui/label";

// UUID versions and their descriptions
const uuidVersions = {
  v1: {
    name: "v1 (Time-based)",
    description: "Generated based on timestamp and MAC address",
  },
  v4: {
    name: "v4 (Random)",
    description: "Generated using random or pseudo-random numbers",
  },
  v5: {
    name: "v5 (Name-based SHA-1)",
    description: "Generated by hashing a namespace and name",
  },
};

type UUIDVersion = keyof typeof uuidVersions;

// Default namespace for UUID v5
const NAMESPACE_URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8"; // URL namespace

export default function UUIDGenerator() {
  const [version, setVersion] = React.useState<UUIDVersion>("v4");
  const [quantity, setQuantity] = React.useState<number>(5);
  const [generatedUUIDs, setGeneratedUUIDs] = React.useState<string[]>([]);
  const [namespace, setNamespace] = React.useState<string>(NAMESPACE_URL);
  const [name, setName] = React.useState<string>("example.com");
  const [namespaceError, setNamespaceError] = React.useState<string>("");

  // Generate UUIDs on initial load
  React.useEffect(() => {
    generateUUIDs();
  }, []);

  const generateUUIDs = () => {
    let newUUIDs: string[] = [];

    try {
      if (version === "v5") {
        // Validate namespace for v5
        if (!validate(namespace)) {
          setNamespaceError("Invalid UUID namespace");
          return;
        }
        setNamespaceError("");

        newUUIDs = Array(quantity)
          .fill(0)
          .map(() => uuidv5(name, namespace));
      } else if (version === "v1") {
        newUUIDs = Array(quantity)
          .fill(0)
          .map(() => uuidv1());
      } else {
        // Default to v4
        newUUIDs = Array(quantity)
          .fill(0)
          .map(() => uuidv4());
      }

      setGeneratedUUIDs(newUUIDs);
    } catch (error) {
      toast.error("Error generating UUID", {
        description: (error as Error).message,
      });
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast("Copied to clipboard", {
      description: "UUID copied to clipboard",
      duration: 2000,
    });
  };

  // Copy all UUIDs at once
  const copyAllUUIDs = () => {
    navigator.clipboard.writeText(generatedUUIDs.join("\n"));
    toast("All UUIDs copied", {
      description: `${generatedUUIDs.length} UUIDs copied to clipboard`,
      duration: 2000,
    });
  };

  // Handle version change
  const handleVersionChange = (newVersion: UUIDVersion) => {
    setVersion(newVersion);
    // Reset any errors
    setNamespaceError("");
    // Generate new UUIDs when version changes
    setTimeout(generateUUIDs, 0);
  };

  // Function to generate a new random namespace
  const generateNewNamespace = () => {
    const newNamespace = uuidv4();
    setNamespace(newNamespace);
    setNamespaceError(""); // Clear any previous errors

    // Regenerate UUIDs using the new namespace if we're in v5 mode
    if (version === "v5") {
      setTimeout(() => {
        generateUUIDs();
      }, 0);
    }

    toast("New namespace generated", {
      description: "Generated a random UUID v4 as namespace",
      duration: 2000,
    });
  };

  console.log("uuidv5", uuidv5("Hello, World!", NAMESPACE_URL));
  return (
    <div className="container mx-auto max-w-4xl py-10">
      <Card>
        <CardHeader>
          <CardTitle>UUID Generator</CardTitle>
          <CardDescription>
            Generate UUIDs with different versions and formats
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="version" className="text-sm font-medium">
              UUID Version
            </Label>
            <Select
              value={version}
              onValueChange={(value) =>
                handleVersionChange(value as UUIDVersion)
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Select UUID version" />
              </SelectTrigger>
              <SelectContent>
                {Object.entries(uuidVersions).map(([key, value]) => (
                  <SelectItem key={key} value={key}>
                    {value.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <p className="text-xs text-muted-foreground flex items-center">
              {uuidVersions[version].description}
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Info className="h-3 w-3 ml-1 cursor-help" />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p className="w-[220px] text-xs">
                      {version === "v1" &&
                        "Uses timestamp and node ID (MAC address). Sequential and sortable."}
                      {version === "v4" &&
                        "Uses random values. Most common for general use cases."}
                      {version === "v5" &&
                        "Generates deterministic UUIDs based on a namespace and name using SHA-1."}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </p>
          </div>

          {version === "v5" && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Namespace UUID</Label>
                <div className="flex gap-2">
                  <Input
                    value={namespace}
                    onChange={(e) => setNamespace(e.target.value)}
                    placeholder="Enter UUID namespace"
                    className={`${
                      namespaceError ? "border-red-500" : ""
                    } flex-1`}
                  />
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={generateNewNamespace}
                    title="Generate new namespace UUID"
                  >
                    <RefreshCw className="h-4 w-4" />
                  </Button>
                </div>
                {namespaceError && (
                  <p className="text-xs text-red-500">{namespaceError}</p>
                )}
                <p className="text-xs text-muted-foreground">
                  Standard namespaces: URL, DNS, OID, or X.500
                </p>
              </div>

              <div className="space-y-2">
                <Label>Name</Label>
                <>
                  <Input
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="Enter a name"
                  />
                </>
                <p className="text-xs text-muted-foreground">
                  The name to hash with the namespace (e.g., domain name)
                </p>

                <p className="text-xs text-muted-foreground">
                  <span className="font-semibold">Note:</span> The same
                  namespace and name will always generate the same UUID.
                </p>
              </div>
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="quantity" className="text-sm font-medium">
              Quantity: {quantity}
            </Label>
            <Select
              value={quantity.toString()}
              onValueChange={(value) => setQuantity(parseInt(value))}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select quantity" />
              </SelectTrigger>
              <SelectContent>
                {Array.from({ length: 20 }, (_, i) => i + 1).map((num) => (
                  <SelectItem key={num} value={num.toString()}>
                    {num}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <Button onClick={generateUUIDs} className="w-full" variant="brand">
            <RefreshCw className="mr-2 h-4 w-4" /> Generate UUIDs
          </Button>

          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <h3 className="font-medium">Generated UUIDs:</h3>
              {generatedUUIDs.length > 1 && (
                <Button variant="outline" size="sm" onClick={copyAllUUIDs}>
                  <Clipboard className="h-3 w-3 mr-1" /> Copy All
                </Button>
              )}
            </div>
            <div className="space-y-2">
              {generatedUUIDs.map((uuid, index) => (
                <div key={index} className="flex items-center gap-2">
                  <Input value={uuid} readOnly className="font-mono" />
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => copyToClipboard(uuid)}
                    title="Copy to clipboard"
                  >
                    <Clipboard className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-4 text-xs text-muted-foreground">
          <div className="w-full">
            <p>
              A UUID (Universally Unique Identifier) is a 128-bit number used to
              identify information in computer systems.
            </p>
            <p className="mt-1">
              Format:{" "}
              {version === "v1"
                ? "time-MAC-based"
                : version === "v4"
                ? "random"
                : "name-based SHA-1"}
              , 128-bit value represented as 32 hexadecimal digits
            </p>
            <p className="mt-1">
              Probability of collision: Extremely low (1 in 5.3×10³⁹)
            </p>
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}
